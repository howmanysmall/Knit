"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84381:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const l={sidebar_position:7},i="Examples",o={unversionedId:"examples",id:"examples",title:"Examples",description:"Start All Services",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/Knit/docs/examples",draft:!1,editUrl:"https://github.com/Sleitnick/Knit/edit/master/docs/examples.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Execution Model",permalink:"/Knit/docs/executionmodel"},next:{title:"Middleware",permalink:"/Knit/docs/middleware"}},s={},c=[{value:"Start All Services",id:"start-all-services",level:2},{value:"Expose a Collection of Modules",id:"expose-a-collection-of-modules",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("h2",{id:"start-all-services"},"Start All Services"),(0,a.kt)("p",null,"A useful pattern is to keep all service modules within a folder. The script that starts Knit can then require all of these at once. Let's say we have a directory structure like such:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Server",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"KnitRuntime ","[Script]"),(0,a.kt)("li",{parentName:"ul"},"Services ","[Folder]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"MyService ","[Module]"),(0,a.kt)("li",{parentName:"ul"},"AnotherService ","[Module]"),(0,a.kt)("li",{parentName:"ul"},"HelloService ","[Module]")))))),(0,a.kt)("p",null,"We can write our KnitRuntime script as such:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)\n\n-- Load all services:\nfor _, v in script.Parent.Services:GetDescendants() do\n    if v:IsA("ModuleScript") then\n        require(v)\n    end\nend\n\nKnit.Start():catch(warn)\n')),(0,a.kt)("p",null,"Alternatively, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Knit.AddServices")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Knit.AddServicesDeep")," to load all of the services without writing a loop. It scans and loads all ModuleScripts found and passes them to ",(0,a.kt)("inlineCode",{parentName:"p"},"Knit.CreateService"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local Knit = require(game:GetService(\"ReplicatedStorage\").Packages.Knit)\n\n-- Load all services within 'Services':\nKnit.AddServices(script.Parent.Services)\n\n-- Load all services (the Deep version scans all descendants of the passed instance):\nKnit.AddServicesDeep(script.Parent.OtherServices)\n\nKnit.Start():catch(warn)\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This same design practice can also be done on the client with controllers. Either loop through and collect controllers or use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Knit.AddControllers")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Knit.AddControllersDeep")," function.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"expose-a-collection-of-modules"},"Expose a Collection of Modules"),(0,a.kt)("p",null,"Like ",(0,a.kt)("inlineCode",{parentName:"p"},"Knit.Util"),", we can expose a collection of modules to our codebase. This is very simple. All we need to do is add ",(0,a.kt)("inlineCode",{parentName:"p"},"Knit.WHATEVER")," and point it to a folder of ModuleScripts."),(0,a.kt)("p",null,"For instance, if we had a folder of modules at ",(0,a.kt)("inlineCode",{parentName:"p"},"ReplicatedStorage.MyModules"),", we can expose this within our main runtime script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)\n\n-- Expose our MyModules folder:\nKnit.MyModules = game:GetService("ReplicatedStorage").MyModules\n\n-- Load services/controllers\n\nKnit.Start()\n')),(0,a.kt)("p",null,"We can then use these modules elsewhere. For instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local SomeModule = require(Knit.MyModules.SomeModule)\n")))}u.isMDXComponent=!0}}]);